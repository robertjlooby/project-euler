---
title: Problem 12
---

---

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be `1 + 2 + 3 + 4 + 5 + 6 + 7 = 28`. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

---

\begin{code}
module Problem12 where

triangleNumbers :: [Integer]
triangleNumbers = 1 : zipWith (+) [2..] triangleNumbers

countDivisors :: Integer -> Integer
countDivisors num = go 0 1 num
  where
    -- we only have to test numbers up to âˆšn
    -- (ceiling to make sure we handle floating point errors with perfect squares)
    max_divisor = ceiling . sqrt . fromIntegral $ num
    go count divisor n
      -- perfect square
      | div' == divisor && mod' == 0 = count + 1
      -- found all the divisors
      | divisor > max_divisor || div' < divisor = count
      -- found a divisor, add 2 since a perfect square would be caught above
      | mod' == 0 = go (count + 2) (divisor + 1) n
      -- keep looking
      | otherwise = go count (divisor + 1) n
      where
        (div', mod') = n `divMod` divisor

-- |
-- >>> answer
-- 76576500
answer :: Integer
answer = head . filter (\n -> countDivisors n > 500) $ triangleNumbers
\end{code}
